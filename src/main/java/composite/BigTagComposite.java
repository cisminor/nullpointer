package composite;

import bean.TagBean;
import bean.TagBeanLocal;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.NativeButton;
import com.vaadin.ui.VerticalLayout;
import domain.Tag;
import edu.dragana.BeanLookup;
import util.Util;

import java.math.BigInteger;
import java.util.List;

public class BigTagComposite extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

    @AutoGenerated
    private VerticalLayout mainLayout;
    @AutoGenerated
    private NativeButton tag_button;
    private Tag tag;
    private BigInteger max;
    private MainLayout mainComposite;
    /**
     * The constructor should first build the main layout, set the
     * composition root and then do any custom initialization.
     *
     * The constructor will not be automatically regenerated by the
     * visual editor.
     */
    public BigTagComposite(Tag tag, MainLayout mainComposite, BigInteger max) {

        buildMainLayout();
        setCompositionRoot(mainLayout);

        // TODO add user code here
        this.tag = tag;
        this.mainComposite = mainComposite;
        this.max = max;
        setData();
        addButtonListeners();

    }

    private void setData(){
        TagBeanLocal tagBean = null;
        int size = 1;
        try {
            tagBean = BeanLookup.get(TagBean.class);
            int count = tagBean.getQuestionsForTag(tag).size();
            size = quantify(count);
        } catch (Exception e) {
            //Util.showError();
        }

        tag_button.setCaption(tag.getTagName());
        tag_button.addStyleName("tag-size-" + size);
    }

    private void addButtonListeners(){
        tag_button.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                mainComposite.getContainer().removeAllComponents();
                mainComposite.getContainer().addComponent(new TagsSearchComposite(tag, mainComposite));
            }
        });
    }

    @AutoGenerated
    private VerticalLayout buildMainLayout() {
        // common part: create layout
        mainLayout = new VerticalLayout();
        mainLayout.setImmediate(false);
        mainLayout.setWidth("-1px");
        mainLayout.setHeight("-1px");
        mainLayout.setMargin(false);

        // top-level component properties
        setWidth("-1px");
        setHeight("-1px");

        // tag_button
        tag_button = new NativeButton();
        tag_button.setCaption("Tag Name");
        tag_button.setImmediate(false);
        tag_button.setWidth("-1px");
        tag_button.setHeight("-1px");
        tag_button.addStyleName("big-tag");
        mainLayout.addComponent(tag_button);

        return mainLayout;
    }

    private int quantify(int t) {
        double d = max.intValue()/5;
        if (t >  4 * d) {
            return 5;
        } else if (t > 3 * d ){
            return 4;
        } else if (t > 2 * d ){
            return 3;
        } else if (t > d ){
            return 2;
        } else {
            return 1;
        }

    }

}

