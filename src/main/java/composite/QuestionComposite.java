package composite;

import bean.*;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.*;
import domain.Answer;
import domain.Question;
import domain.Tag;
import edu.dragana.BeanLookup;
import edu.dragana.MyVaadinApp;
import org.hibernate.Hibernate;
import util.Util;

import javax.swing.*;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class QuestionComposite extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout replies_container;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_2;
	@AutoGenerated
	private VerticalLayout verticalLayout_2;
	@AutoGenerated
	private HorizontalLayout horizontalLayout_infoContainer;
	@AutoGenerated
	private Label label_user;
	@AutoGenerated
	private NativeButton nativeButton_downVote;
	@AutoGenerated
	private NativeButton nativeButton_upVote;
	@AutoGenerated
	private Label label_text;
	@AutoGenerated
	private Label label_title;
	@AutoGenerated
	private VerticalLayout verticalLayout_1;
	@AutoGenerated
	private Label label_downVotes;
	@AutoGenerated
	private Label label_upVotes;
	@AutoGenerated
	private Label label_1;
	@AutoGenerated
	private Label label_status;
    private HorizontalLayout tags_container;
    private Label label_date;
    private NativeButton nativeButton_delete;

    private Question question;
    private MainLayout mainComposite;
    private VerticalLayout title_container;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public QuestionComposite(Question question, MainLayout mainComposite) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
        this.question = question;
        this.mainComposite = mainComposite;
        setData();
        addButtonListeners();
	}

    private void setData(){
        label_title.setValue("["+Util.getStatus(question.getStatus())+"] "+question.getTitle());
        label_text.setValue(question.getText());
        label_user.setValue(question.getUser().getUsername());
        label_upVotes.setValue("+"+question.getUpVotes().size());
        label_downVotes.setValue("-"+question.getDownVotes().size());
        Date date = new Date(question.getDateCreated());
        String formatDate = new SimpleDateFormat("dd MMM yy HH:ss").format(date);
        label_date.setValue(formatDate);
        if (Util.getCurrentUser().equals(question.getUser())){
            nativeButton_upVote.setVisible(false);
            nativeButton_downVote.setVisible(false);
            nativeButton_delete.setVisible(true);
        }

        try {
            UpVoteBeanLocal upBean = BeanLookup.get(UpVoteBean.class);

            if (upBean.findUpVoteByUser(Util.getCurrentUser(), question) != null){
                nativeButton_upVote.setEnabled(false);
                nativeButton_upVote.setCaption("Up Voted");
                nativeButton_downVote.setEnabled(false);
            } else {
                DownVoteBeanLocal downBean = BeanLookup.get(DownVoteBean.class);
                if (downBean.findDownVoteByUser(question, Util.getCurrentUser()) != null){
                    nativeButton_downVote.setEnabled(false);
                    nativeButton_downVote.setCaption("Down Voted");
                    nativeButton_upVote.setEnabled(false);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            Util.showError();
        }

        List<Tag> tags = question.getTags();
        tags_container.removeAllComponents();
        for (Tag t : tags){
            tags_container.addComponent(new TagComposite(t, mainComposite));
        }
        List<Answer> answers = question.getAnswers();
        replies_container.removeAllComponents();
        String suf = "answer";
        if (answers.size() % 10 != 1){
            suf += "s";
        }
        Label label = new Label(answers.size()+" "+suf);
        label.setStyleName("answers-label");
        label.addStyleName("border-bottom");
        replies_container.addComponent(label);
        for (Answer a : answers){
            replies_container.addComponent(new AnswerComposite(a, question, this));
        }
        replies_container.addComponent(new AddAnswerComposite(question, this));
    }

    private void addButtonListeners(){
        nativeButton_upVote.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                try {
                    UpVoteBeanLocal upVoteBean = BeanLookup.get(UpVoteBean.class);
                    upVoteBean.insertUpVote(question, Util.getCurrentUser());
                    updateQuestion();
                } catch (Exception e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                    Util.showError();
                }
            }
        });
        nativeButton_downVote.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                try {
                    DownVoteBeanLocal downVoteBean = BeanLookup.get(DownVoteBean.class);
                    downVoteBean.insertDownVote(question, Util.getCurrentUser());
                    updateQuestion();
                } catch (Exception e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                    Util.showError();
                }
            }
        });

        nativeButton_delete.addClickListener(new Button.ClickListener() {
            @Override
            public void buttonClick(Button.ClickEvent event) {
                try {
                    QuestionBeanLocal questionBean = BeanLookup.get(QuestionBean.class);
                    questionBean.deleteQuestion(question);
                    mainLayout.removeAllComponents();
                    Notification.show("Question deleted", Notification.Type.HUMANIZED_MESSAGE);

                } catch (Exception e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                    Util.showError();
                }
            }
        });
    }

    public void updateQuestion(){
        QuestionBeanLocal questionBean = null;
        try {
            questionBean = BeanLookup.get(QuestionBean.class);
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            Util.showError();
        }
        question = questionBean.getQuestion(question);
        setData();
    }

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");

        //title_container
        title_container = new VerticalLayout();
        title_container.setStyleName("border-bottom");
        mainLayout.addComponent(title_container);

        // label_title
        label_title = new Label();
        label_title.setImmediate(false);
        label_title.setWidth("-1px");
        label_title.setHeight("-1px");
        label_title.setValue("Label");
        label_title.setStyleName("question-title");
        title_container.addComponent(label_title);
		
		// horizontalLayout_2
		horizontalLayout_2 = buildHorizontalLayout_2();
		mainLayout.addComponent(horizontalLayout_2);
		
		// replies_container
		replies_container = new VerticalLayout();
		replies_container.setImmediate(false);
		replies_container.setWidth("-1px");
		replies_container.setHeight("-1px");
		replies_container.setMargin(true);
		replies_container.setSpacing(true);
		mainLayout.addComponent(replies_container);

		
		return mainLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_2() {
		// common part: create layout
		horizontalLayout_2 = new HorizontalLayout();
		horizontalLayout_2.setImmediate(false);
		horizontalLayout_2.setWidth("500px");
		horizontalLayout_2.setHeight("-1px");
		horizontalLayout_2.setMargin(false);
		horizontalLayout_2.setSpacing(true);
		
		// verticalLayout_1
		verticalLayout_1 = buildVerticalLayout_1();
		horizontalLayout_2.addComponent(verticalLayout_1);
		
		// verticalLayout_2
		verticalLayout_2 = buildVerticalLayout_2();
		horizontalLayout_2.addComponent(verticalLayout_2);
		horizontalLayout_2.setExpandRatio(verticalLayout_2, 1.0f);
		
		return horizontalLayout_2;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_1() {
		// common part: create layout
		verticalLayout_1 = new VerticalLayout();
		verticalLayout_1.setImmediate(false);
		verticalLayout_1.setWidth("-1px");
		verticalLayout_1.setHeight("-1px");
		verticalLayout_1.setMargin(false);
        verticalLayout_1.setStyleName("votes-stat");
		
		// label_status
		label_status = new Label();
		label_status.setEnabled(false);
		label_status.setImmediate(false);
		label_status.setVisible(false);
		label_status.setWidth("-1px");
		label_status.setHeight("-1px");
		label_status.setValue("Label");
		verticalLayout_1.addComponent(label_status);
		verticalLayout_1.setComponentAlignment(label_status, new Alignment(20));
		
		// label_1
		label_1 = new Label();
		label_1.setImmediate(false);
		label_1.setWidth("-1px");
		label_1.setHeight("-1px");
		label_1.setValue("Votes");
        label_1.setStyleName("votes-label");
		verticalLayout_1.addComponent(label_1);
		verticalLayout_1.setComponentAlignment(label_1, new Alignment(20));
		
		// label_upVotes
		label_upVotes = new Label();
		label_upVotes.setImmediate(false);
		label_upVotes.setWidth("-1px");
		label_upVotes.setHeight("-1px");
		label_upVotes.setValue("+12");
        label_upVotes.setStyleName("votes-count");
		verticalLayout_1.addComponent(label_upVotes);
		verticalLayout_1
				.setComponentAlignment(label_upVotes, new Alignment(20));
		
		// label_downVotes
		label_downVotes = new Label();
		label_downVotes.setImmediate(false);
		label_downVotes.setWidth("-1px");
		label_downVotes.setHeight("-1px");
		label_downVotes.setValue("-7");
        label_downVotes.setStyleName("votes-count");
		verticalLayout_1.addComponent(label_downVotes);
		verticalLayout_1.setComponentAlignment(label_downVotes, new Alignment(
				20));
		
		return verticalLayout_1;
	}

	@AutoGenerated
	private VerticalLayout buildVerticalLayout_2() {
		// common part: create layout
		verticalLayout_2 = new VerticalLayout();
		verticalLayout_2.setImmediate(false);
		verticalLayout_2.setWidth("100.0%");
		verticalLayout_2.setHeight("-1px");
		verticalLayout_2.setMargin(false);
        verticalLayout_2.setStyleName("question-text-container");

		
		// label_text
		label_text = new Label();
		label_text.setImmediate(false);
		label_text.setWidth("500px");
		label_text.setHeight("-1px");
		label_text.setValue("Label");
        label_text.setContentMode(ContentMode.HTML);
        label_text.setStyleName("question-text");
		verticalLayout_2.addComponent(label_text);

        //tags_container
        tags_container = new HorizontalLayout();
        tags_container.addComponent(new Label());
        verticalLayout_2.addComponent(tags_container);
		
		// horizontalLayout_infoContainer
		horizontalLayout_infoContainer = buildHorizontalLayout_infoContainer();
		verticalLayout_2.addComponent(horizontalLayout_infoContainer);
		
		return verticalLayout_2;
	}

	@AutoGenerated
	private HorizontalLayout buildHorizontalLayout_infoContainer() {
		// common part: create layout
		horizontalLayout_infoContainer = new HorizontalLayout();
		horizontalLayout_infoContainer.setImmediate(false);
		horizontalLayout_infoContainer.setWidth("100.0%");
		horizontalLayout_infoContainer.setHeight("-1px");
		horizontalLayout_infoContainer.setMargin(false);
		
		// nativeButton_upVote
		nativeButton_upVote = new NativeButton();
		nativeButton_upVote.setCaption("Up Vote");
        nativeButton_upVote.setStyleName("vote-button");
		nativeButton_upVote.setImmediate(true);
		nativeButton_upVote.setWidth("-1px");
		nativeButton_upVote.setHeight("-1px");
		horizontalLayout_infoContainer.addComponent(nativeButton_upVote);
		
		// nativeButton_downVote
		nativeButton_downVote = new NativeButton();
		nativeButton_downVote.setCaption("DownVote");
        nativeButton_downVote.setStyleName("vote-button");
		nativeButton_downVote.setImmediate(true);
		nativeButton_downVote.setWidth("-1px");
		nativeButton_downVote.setHeight("-1px");
		horizontalLayout_infoContainer.addComponent(nativeButton_downVote);

        //nativeButton_delete
        nativeButton_delete = new NativeButton();
        nativeButton_delete.setCaption("Delete");
        nativeButton_delete.setVisible(false);
        nativeButton_delete.setStyleName("delete-button");
        horizontalLayout_infoContainer.addComponent(nativeButton_delete);

        //label_date
        label_date = new Label("DATE");
        label_date.setImmediate(false);
        label_date.setWidth("-1px");
        label_date.setHeight("-1px");
        label_date.setStyleName("date-label");
        horizontalLayout_infoContainer.addComponent(label_date);
        horizontalLayout_infoContainer.setExpandRatio(label_date, 1.0f);
        horizontalLayout_infoContainer.setComponentAlignment(label_date,
                Alignment.MIDDLE_RIGHT);
		
		// label_user
		label_user = new Label();
		label_user.setImmediate(false);
		label_user.setWidth("-1px");
		label_user.setHeight("-1px");
		label_user.setValue("By");
        label_user.setStyleName("user-label");
		horizontalLayout_infoContainer.addComponent(label_user);
		horizontalLayout_infoContainer.setComponentAlignment(label_user,
				Alignment.MIDDLE_RIGHT);
		
		return horizontalLayout_infoContainer;
	}

}
