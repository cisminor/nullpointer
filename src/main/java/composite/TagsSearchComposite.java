package composite;

import bean.TagBean;
import bean.TagBeanLocal;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.ui.*;
import domain.Question;
import domain.Tag;
import edu.dragana.BeanLookup;
import util.Util;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public class TagsSearchComposite extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private VerticalLayout mainLayout;
	@AutoGenerated
	private VerticalLayout result_container;
	@AutoGenerated
	private ComboBox comboBox_search_tags;
    private Tag tag;
    private MainLayout mainComposite;
	/**
	 * The constructor should first build the main layout, set the
	 * composition root and then do any custom initialization.
	 *
	 * The constructor will not be automatically regenerated by the
	 * visual editor.
	 */
	public TagsSearchComposite(Tag tag, MainLayout mainComposite) {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
        this.tag = tag;
        this.mainComposite = mainComposite;

        addButtonListeners();
        setData();
	}

    private void setData(){
        try {
            TagBeanLocal tagBean = BeanLookup.get(TagBean.class);
            List<Tag> tags = tagBean.getAllTags();
            for (Tag t : tags){
                comboBox_search_tags.addItem(t);
                if (tag != null && tag.getTagId() == t.getTagId()){
                    tag = t;
                }
            }
            if (tag != null){
                comboBox_search_tags.select(tag);
            } else {
                CssLayout flow = new CssLayout();
                flow.setStyleName("flow");
                result_container.addComponent(flow);
                BigInteger max = tagBean.getMaxCount();
                for (Tag t : tags){
                    flow.addComponent(new BigTagComposite(t, mainComposite, max));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
            Util.showError();
        }
    }

    private void addButtonListeners(){
        comboBox_search_tags.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(Property.ValueChangeEvent event) {
                result_container.removeAllComponents();
                Tag tag = (Tag) comboBox_search_tags.getValue();
                try {
                    TagBeanLocal tagBean = BeanLookup.get(TagBean.class);
                    List<Question> questions = tagBean.getQuestionsForTag(tag);
                    for (Question q : questions){
                        result_container.addComponent(new QuestionListComposite(q, mainComposite));
                    }
                } catch (Exception e) {
                    e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
                    Util.showError();
                }
            }
        });
    }

	@AutoGenerated
	private VerticalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("-1px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("-1px");
		setHeight("-1px");
		
		// comboBox_search_tags
		comboBox_search_tags = new ComboBox();
		comboBox_search_tags.setImmediate(true);
        comboBox_search_tags.setInvalidAllowed(false);
        comboBox_search_tags.setNullSelectionAllowed(false);
        comboBox_search_tags.setInputPrompt("Enter tag name");
		comboBox_search_tags.setWidth("250px");
		comboBox_search_tags.setHeight("-1px");
		mainLayout.addComponent(comboBox_search_tags);
		mainLayout.setComponentAlignment(comboBox_search_tags,
				new Alignment(20));
		
		// result_container
		result_container = new VerticalLayout();
		result_container.setImmediate(false);
		result_container.setWidth("600px");
		result_container.setHeight("-1px");
		result_container.setMargin(false);
		result_container.setSpacing(true);
		mainLayout.addComponent(result_container);
		mainLayout.setComponentAlignment(result_container, new Alignment(20));
		
		return mainLayout;
	}

}
